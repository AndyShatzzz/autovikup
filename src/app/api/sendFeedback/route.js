import { NextResponse } from "next/server";
import TelegramBot from "node-telegram-bot-api";
import FormData from "form-data";
import fetch from "node-fetch";

const botToken = process.env.BOT_TOKEN;
const chatId = process.env.CHAT_ID;

const bot = new TelegramBot(botToken, { polling: false });

export async function POST(request) {
  try {
    const formData = await request.formData();
    const automobile = formData.get("automobile");
    const feedback = formData.get("feedback");
    const image = formData.get("image");

    const text = `----------------------------------------\n ü§å –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤\n \n üë§ –ò–º—è –∏ –ú–æ–¥–µ–ª—å –∞–≤—Ç–æ: ${automobile}\n \n ‚úâÔ∏è –û—Ç–∑—ã–≤: ${feedback}`;

    await bot.sendMessage(chatId, text);

    if (image) {
      const imageBuffer = Buffer.from(await image.arrayBuffer());
      const form = new FormData();
      form.append("chat_id", chatId);
      form.append("photo", imageBuffer, { filename: image.name });

      const response = await fetch(
        `https://api.telegram.org/bot${botToken}/sendPhoto`,
        {
          method: "POST",
          body: form,
          headers: form.getHeaders(),
        }
      );

      if (!response.ok) {
        throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram");
      }
    }

    return NextResponse.json(
      { message: "–°–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã" },
      { status: 200 }
    );
  } catch (error) {
    return NextResponse.json(
      { message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è" },
      { status: 500 }
    );
  }
}
